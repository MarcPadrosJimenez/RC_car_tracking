#include <Arduino_LSM6DS3.h> //IMU library
#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "RCCarTelegram"
  https://create.arduino.cc/cloud/things/9f6427cc-81eb-4757-9ef1-2f5bccf15e1a 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String isMoving;
  int totalCollisions;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

int outPin1 = 2;    //motor1
int outPin2 = 3;    //motor1

int outPin4 = 5;    //motor2
int outPin3 = 6;    //motor2

int buzzerPin = 12; //Buzzer

int sensorEchoPin = 10;     //US Sensor Echo
int sensorTriggerPin = 9;   //US Sensor Trigger

char movement = 'D';        //Movement

bool obstacle = false;

int lastmovement = 0;
int lastReading = 0;
int lastAccel = 0;

double displacement = 0;
double velocity = 0;
double acceleration = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Initialize serial1 for bluetooth comunication:
  Serial1.begin(9600);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  pinMode(outPin1,OUTPUT);
  pinMode(outPin2,OUTPUT);
  pinMode(outPin3,OUTPUT);
  pinMode(outPin4,OUTPUT);

  analogWrite(buzzerPin, 0);

  pinMode(sensorTriggerPin,OUTPUT);
  pinMode(sensorEchoPin,INPUT);
  
  pinMode(LED_BUILTIN,OUTPUT);
  
  isMoving="No";

  totalCollisions=0;
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  updateBuzzer();
  
  if(millis()-lastReading > 200){
    checkObstacle();
    lastReading = millis();
  }

  //readIMU();
  
  if (Serial1.available() > 0)
  {
    movement = Serial1.read();
    Serial.println(movement);
    lastmovement=millis();
  }
  //detectObstacle
  if(movement=='V'){
    obstacle=true;
    totalCollisions++;
  }
  if(movement=='v'){
    obstacle=false;
  }
  
  if(obstacle && (movement == 'I' || movement == 'G' || movement == 'F')){
    movement='S';
  }
  
  /*_________________________________________________________________________________________________*/
  
  if(movement == 'F')        //move forwards
  {
    digitalWrite(outPin1,HIGH);
    digitalWrite(outPin2,LOW);
    digitalWrite(outPin3,HIGH);
    digitalWrite(outPin4,LOW);
  }
  else if (movement == 'B')       //move backwards
  {
    digitalWrite(outPin1,LOW);
    digitalWrite(outPin2,HIGH);
    digitalWrite(outPin3,LOW);
    digitalWrite(outPin4,HIGH);
  }
  else if (movement == 'S')     //stop!!
  {   
    digitalWrite(outPin1,LOW);
    digitalWrite(outPin2,LOW);
    digitalWrite(outPin3,LOW);
    digitalWrite(outPin4,LOW);
  }
  else if (movement == 'R')    //right
  {
    digitalWrite(outPin1,HIGH);
    digitalWrite(outPin2,LOW);
    digitalWrite(outPin3,LOW);
    digitalWrite(outPin4,LOW);
  }
  else if (movement == 'L')     //left
  {
    digitalWrite(outPin1,LOW);
    digitalWrite(outPin2,LOW);
    digitalWrite(outPin3,HIGH);
    digitalWrite(outPin4,LOW);
  }
  else if (movement == 'I')    //forward right
  {
    digitalWrite(outPin1,HIGH);
    digitalWrite(outPin2,LOW);
    digitalWrite(outPin3,LOW);
    digitalWrite(outPin4,HIGH);
  }
  else if (movement == 'G')    //forward left
  {
    digitalWrite(outPin1,LOW);
    digitalWrite(outPin2,HIGH);
    digitalWrite(outPin3,HIGH);
    digitalWrite(outPin4,LOW);
  }
  if(movement=='F' || movement=='B' || movement=='R' || movement=='L' || movement=='I' || movement=='G'){
    if(isMoving=="No") Serial.println("Yes");
    isMoving="Yes";
  }
  
  if((movement=='S' || movement=='D') && millis()-lastmovement > 5000){
    if(isMoving=="Yes") Serial.println("No");
    isMoving="No";
    if(movement=='D'){ //Bluetooth disconnected
      totalCollisions=0;
    }
  }
}

void updateBuzzer(){
  if(obstacle){
    //Intermitent Buzzing
    if(millis()%2000<1000){
      analogWrite(buzzerPin, 20);
    }
    else{
      analogWrite(buzzerPin, 0);
    }
  }
  else{
    analogWrite(buzzerPin, 0);
  }
}

void checkObstacle(){
  // take the trigger pin low to start a pulse:
  digitalWrite(sensorTriggerPin, LOW);
  // delay 2 microseconds:
  delayMicroseconds(2);
  // take the trigger pin high:
  digitalWrite(sensorTriggerPin, HIGH);
  // delay 10 microseconds:
  delayMicroseconds(10);
  // take the trigger pin low again to complete the pulse:
  digitalWrite(sensorTriggerPin, LOW);
 
  // listen for a pulse on the echo pin:
  long duration = pulseIn(sensorEchoPin, HIGH);
  // calculate the distance in cm.
  //Sound travels approx.0.0343 microseconds per cm.,
  // and it's going to the target and back (hence the /2):
  int distance = (duration * 0.0343) / 2;
  Serial.print("Distance cm: ");
  Serial.println(distance);
  
  if(distance!=0 && distance<=10){
    if(!obstacle) totalCollisions++;
    obstacle=true;
  }
  else{
    obstacle=false;
  }
}

/*void readIMU(){
  if(IMU.accelerationAvailable()){
    double x, y, z, dt;
    IMU.readAcceleration(x,y,z);
    dt = (millis()-lastAccel)/1000;
    lastAccel=millis();
    acceleration=x;
    dv = x*dt;
    velocity += dv;
    dp = velocity*dt;
    displacement += dp;
    Serial.print("Displacement: ");
    Serial.println(displacement);
  }
}*/

/*
  Since IsMoving is READ_WRITE variable, onIsMovingChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIsMovingChange()  {
  // Add your code here to act upon IsMoving change
  
}
/*
  Since TotalCollisions is READ_WRITE variable, onTotalCollisionsChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTotalCollisionsChange()  {
  // Add your code here to act upon TotalCollisions change
}
